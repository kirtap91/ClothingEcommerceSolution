@page "/identity/account/login"
@implements IDisposable
<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <EditForm Enhance Model="User" OnInvalidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="card">
                    <div class="card-header">Fill this form to Login</div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" @bind="User.Password" class="form-control" />
                        </div>
                        <div class="form-group mt-3">
                            @if (messageDialogService.ShowSaveButton)
                            {
                                <button class="btn btn-outline-primary float-end" type="submit">Login</button>
                            }
                            <BusyButtonComponent ShowBusyButton="messageDialogService.ShowBusyButton"></BusyButtonComponent>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {
    LoginDTO User = new();

    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }
    async Task HandleLogin()
    {
        var result = await accountService.Login(User);
        messageDialogService.ShowSaveButton = false;
        messageDialogService.ShowBusyButton = !messageDialogService.ShowSaveButton;
        if (result.IsSuccessful)
        {
            var customAuthenticatorProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthenticatorProvider.UpdateAuthenticationState(new TokenProp()
                {
                    Token = result.Token,
                    RefreshToken = result.RefreshToken
                });
            NavManager.NavigateTo("/", forceLoad: true);
        }
    }
    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}
