@page "/frontpage"
@implements IDisposable
@if (ProductService.IsVisible)
{
    <LoadingPage />
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-12">
                @if (ProductService.FeaturedProducts is not null)
                {
                    <div class="control-container text-dark">
                        <SfCarousel ButtonsVisibility="CarouselButtonVisibility.VisibleOnHover"
                                    AnimationEffect="CarouselAnimationEffect.Slide"
                                    AutoPlay="true"
                                    ShowIndicators="true">
                            <ChildContent>
                                @foreach (Product product in ProductService.FeaturedProducts!.OrderByDescending(_ => _.DateUploaded).Take(5)!)
                                {
                                    <CarouselItem>
                                        <figure class="img-container">
                                            <img src="@product.Base64Img" class="img-fluid" alt="Product Image" />
                                        </figure>
                                        <div class="d-flex justify-content-center">
                                            <div style="position:absolute; bottom:50px;">
                                                <div class="vstack gap-3 mb-3 text-center text-md-start">
                                                    <div>
                                                        <p class="text-dark fw-bold display-4">
                                                            @product.Name
                                                            <sup class="badge rounded-pill bg-primary fs-6">@GetNewLabel(product.DateUploaded)</sup>
                                                            <span class="badge rounded-pill bg-danger position-relative ms-2">
                                                                @((product.Quantity - 1) > 0 ? $"{product.Quantity - 1}+" : product.Quantity)
                                                            </span>
                                                        </p>
                                                    </div>
                                                    <p class="text-muted fs-5 w-100 w-md-75" style="text-align:justify;">
                                                        @(General.GetDescription(product.Description!))
                                                    </p>
                                                </div>
                                                <div class="hstack gap-1 d-flex justify-content-center">
                                                    <button class="btn btn-secondary fw-bold btn-sm btn-md"> <i class="fa fa-list"></i> Detaljer</button>
                                                    <button class="btn btn-outline-danger fw-bold btn-sm btn-md"><i class="fa fa-cart-plus"></i> Köp nu</button>
                                                </div>
                                            </div>
                                        </div>
                                    </CarouselItem>
                                }
                            </ChildContent>
                            <PreviousButtonTemplate>
                                <img src="../resources/left-chevron.png" width="50" height="50" id="styleCursor" />
                            </PreviousButtonTemplate>
                            <NextButtonTemplate>
                                <img src="../resources/right-chevron.png" width="50" height="50" id="styleCursor" />
                            </NextButtonTemplate>

                            <IndicatorsTemplate>
                                <div class="indicator"></div>
                            </IndicatorsTemplate>
                        </SfCarousel>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">No product available</div>
                }
            </div>
        </div>
    </div>
}


@code {
    List<Product>? FeaturedProductList = new();

    protected override async Task OnInitializedAsync()
    {
        bool featured = true;
        await ProductService.GetAllProducts(featured);
        ProductService.ProductAction += StateHasChanged;
    }

    private async Task RetrieveFeaturedProducts()
    {
        FeaturedProductList?.Clear();
        bool featured = true;
        await ProductService.GetAllProducts(featured);
        FeaturedProductList = ProductService.FeaturedProducts;
    }

    string GetNewLabel(DateTime dateUploaded)
    {
        int maxDays = 30;
        int productDateAfterUploaded = (DateTime.Now - dateUploaded).Days;
        return productDateAfterUploaded <= maxDays ? "New" : null!;
    }

    public void Dispose()
    {
        ProductService.ProductAction -= StateHasChanged;
    }
}
