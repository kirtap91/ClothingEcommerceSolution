@if (!ProductService.IsVisible)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-md-12 col-sm-12">
                <hr />
                <span style="font-family:'Times New Roman', Times, serif">Featured</span>
                <div class="card border-0">
                    <div class="card-body">
                        <div class="d-flex justify-content-evenly align-items-center">

                            <img src="../resources/left-chevron.png" width="50" height="50" id="styleCursor" @onclick="PreviousButton" />
                            @if (FeaturedProducts != null && FeaturedProducts.Any())
                            {
                                @foreach (var item in FeaturedProducts)
                                {
                                    <div class="card">
                                        <div class="card-body">
                                            @if (item.DateUploaded.AddDays(30) < DateTime.Now)
                                            {
                                                <span class="badge bg-primary d-flex align-items-end float-end" style="width:50px">New</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-none d-flex align-items-end float-end" style="width:50px; height:20px"></span>
                                            }
                                            <img class="card-img-top childImage" src="@item.Base64Img" width="150" height="200" style="max-width:150px;min-width:150px;" />
                                            <div id="productCover" class="bg-secondary text-white d-flex justify-content-center text-wrap">@item.Name</div>
                                        </div>
                                    </div>
                                }
                            }
                            <img src="../resources/right-chevron.png" width="50" height="50" id="styleCursor" @onclick="NextButton" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<style>
    #styleCursor {
        cursor: pointer
    }

    #productCover {
        width: 150px;
        font-size: 14px;
        height: 50px;
        position: absolute;
        bottom: 10px;
        border-radius: 10px;
        padding: 2px;
        cursor: pointer;
    }

        #productCover:hover {
            opacity: 1
        }

    img {
        opacity: 1;
        cursor: pointer;
    }

    .childImage:hover {
        opacity: 0.5;
    }

    .bg-none {
        background-color: transparent;
    }
</style>

@code {
    public int PageSize { get; set; } = 8;
    public int Skip { get; set; } = 0;
    public int Take { get; set; } = 8;

    List<Product> FeaturedProducts = new();

    protected async override Task OnInitializedAsync()
    {
        bool featured = true;
        await ProductService.GetAllProducts(featured);
        ProductService.ProductAction += StateHasChanged;
        await LoadData();
    }

    private async Task LoadData()
    {
        var getData = await SkipAndTake(Skip, Take);
        Skip += PageSize;
        AddToFeaturedProducts(getData);
    }

    private async Task<List<Product>> SkipAndTake(int skip, int take) =>
        ProductService.FeaturedProducts.Skip(skip).Take(take).ToList();

    private void AddToFeaturedProducts(List<Product> incomingProduct)
    {
        FeaturedProducts.Clear();
        FeaturedProducts.AddRange(incomingProduct);
    }

    private async Task NextButton()
    {
        if (Skip > ProductService.FeaturedProducts.Count()) return;
        var getNextProducts = await SkipAndTake(Skip, Take);
        Skip += PageSize;
        AddToFeaturedProducts(getNextProducts);
    }

    private async Task PreviousButton()
    {
        if (Skip <= PageSize) return;
        Skip -= PageSize * 2;
        var getPreviousProducts = await SkipAndTake(Skip, Take);
        Skip += PageSize;
        AddToFeaturedProducts(getPreviousProducts);
    }
    public void Dispose()
    {
        ProductService.ProductAction -= StateHasChanged;
    }

}
